Index: hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/OfficeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uz.exadel.hotdeskbooking.controller;\r\n\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport uz.exadel.hotdeskbooking.dto.OfficeDto;\r\nimport uz.exadel.hotdeskbooking.model.Office;\r\nimport uz.exadel.hotdeskbooking.response.ApiResponse;\r\nimport uz.exadel.hotdeskbooking.response.BaseResponse;\r\nimport uz.exadel.hotdeskbooking.service.OfficeService;\r\n\r\nimport java.util.List;\r\n\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/office\")\r\n@RestController\r\npublic class OfficeController extends BaseResponse {\r\n\r\n    @Autowired\r\n    private final OfficeService officeService;\r\n\r\n    @GetMapping\r\n    public ApiResponse getOfficeList(){\r\n        return officeService.getOfficeList();\r\n    }\r\n\r\n    @PostMapping(\"/{addressId}\")\r\n    public ApiResponse addOffice(@RequestBody Office office, @PathVariable String addressId){\r\n        return officeService.addOffice(office, addressId);\r\n    }\r\n\r\n\r\n    @PutMapping(\"/{officeId}\")\r\n    public ApiResponse updateOffice(@RequestBody Office editingOffice, @PathVariable String officeId){\r\n        return officeService.updateOffice(editingOffice, officeId);\r\n    }\r\n\r\n    @DeleteMapping(\"/{officeId}\")\r\n    public ApiResponse deleteOffice(@PathVariable String officeId){\r\n        return officeService.deleteOffice(officeId);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/OfficeController.java b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/OfficeController.java
--- a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/OfficeController.java	
+++ b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/OfficeController.java	
@@ -5,6 +5,7 @@
 import lombok.RequiredArgsConstructor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.*;
+import uz.exadel.hotdeskbooking.domain.OfficeDomain;
 import uz.exadel.hotdeskbooking.dto.OfficeDto;
 import uz.exadel.hotdeskbooking.model.Office;
 import uz.exadel.hotdeskbooking.response.ApiResponse;
@@ -27,13 +28,13 @@
     }
 
     @PostMapping("/{addressId}")
-    public ApiResponse addOffice(@RequestBody Office office, @PathVariable String addressId){
+    public ApiResponse addOffice(@RequestBody OfficeDomain office, @PathVariable String addressId){
         return officeService.addOffice(office, addressId);
     }
 
 
     @PutMapping("/{officeId}")
-    public ApiResponse updateOffice(@RequestBody Office editingOffice, @PathVariable String officeId){
+    public ApiResponse updateOffice(@RequestBody OfficeDomain editingOffice, @PathVariable String officeId){
         return officeService.updateOffice(editingOffice, officeId);
     }
 
@@ -41,4 +42,6 @@
     public ApiResponse deleteOffice(@PathVariable String officeId){
         return officeService.deleteOffice(officeId);
     }
+
+
 }
Index: hotdeskBooking/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.6.3</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>uz.exadel</groupId>\r\n    <artifactId>hotdeskBooking</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>hotdeskBooking</name>\r\n    <description>hotdeskBooking</description>\r\n    <properties>\r\n        <java.version>17</java.version>\r\n    </properties>\r\n\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>javax.validation</groupId>\r\n            <artifactId>validation-api</artifactId>\r\n            <version>1.1.0.Final</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.postgresql</groupId>\r\n            <artifactId>postgresql</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <configuration>\r\n                    <excludes>\r\n                        <exclude>\r\n                            <groupId>org.projectlombok</groupId>\r\n                            <artifactId>lombok</artifactId>\r\n                        </exclude>\r\n                    </excludes>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hotdeskBooking/pom.xml b/hotdeskBooking/pom.xml
--- a/hotdeskBooking/pom.xml	
+++ b/hotdeskBooking/pom.xml	
@@ -49,6 +49,11 @@
             <artifactId>spring-boot-starter-test</artifactId>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.telegram</groupId>
+            <artifactId>telegrambots</artifactId>
+            <version>5.7.1</version>
+        </dependency>
     </dependencies>
 
     <build>
Index: hotdeskBooking/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.url= jdbc:postgresql://localhost:5432/booking_db\r\nspring.datasource.username=postgres\r\n<<<<<<< HEAD\r\nspring.datasource.password=84310108\r\n=======\r\nspring.datasource.password=\r\nspring.jpa.generate-ddl=true\r\n>>>>>>> main\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.show-sql=true\r\nspring.jpa.properties.hibernate.format_sql = true\r\nspring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect\r\nspring.jpa.open-in-view=false
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/hotdeskBooking/src/main/resources/application.properties b/hotdeskBooking/src/main/resources/application.properties
--- a/hotdeskBooking/src/main/resources/application.properties	
+++ b/hotdeskBooking/src/main/resources/application.properties	
@@ -1,13 +1,9 @@
-spring.datasource.url= jdbc:postgresql://localhost:5432/booking_db
+spring.datasource.url= jdbc:postgresql://localhost:5432/bookingDB
 spring.datasource.username=postgres
-<<<<<<< HEAD
 spring.datasource.password=84310108
-=======
-spring.datasource.password=
 spring.jpa.generate-ddl=true
->>>>>>> main
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.show-sql=true
 spring.jpa.properties.hibernate.format_sql = true
 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
-spring.jpa.open-in-view=false
\ No newline at end of file
+spring.jpa.open-in-view=false
Index: hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/OfficeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uz.exadel.hotdeskbooking.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport uz.exadel.hotdeskbooking.dto.OfficeDto;\r\nimport uz.exadel.hotdeskbooking.model.Address;\r\nimport uz.exadel.hotdeskbooking.model.Office;\r\nimport uz.exadel.hotdeskbooking.repository.AddressRepository;\r\nimport uz.exadel.hotdeskbooking.repository.MapRepository;\r\nimport uz.exadel.hotdeskbooking.repository.OfficeRepository;\r\nimport uz.exadel.hotdeskbooking.response.ApiResponse;\r\nimport uz.exadel.hotdeskbooking.response.BaseResponse;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class OfficeService extends BaseResponse {\r\n\r\n    @Autowired\r\n    OfficeRepository officeRepository;\r\n    @Autowired\r\n    AddressRepository addressRepository;\r\n    @Autowired\r\n    MapRepository mapRepository;\r\n\r\n\r\n    public ApiResponse getOfficeList(){\r\n        SUCCESS.setData(officeRepository.findAll());\r\n        return SUCCESS;\r\n    }\r\n\r\n    public ApiResponse addOffice(Office office, String addressId){\r\n\r\n        boolean addressExists = officeRepository.existsOfficeByAddress_Id(addressId);\r\n        if (addressExists) return ALREADY_EXISTS;\r\n\r\n        Optional<Address> byId = addressRepository.findById(addressId);\r\n\r\n        boolean doesExist = officeRepository.existsByName(office.getName());\r\n        if (doesExist) return ALREADY_EXISTS;\r\n\r\n        if (byId.isEmpty()) return NOT_FOUND;\r\n        else {\r\n            Address address = byId.get();\r\n            Office newOffice = new Office(office.getName(), office.isParkingAvailable(), address);\r\n            officeRepository.save(newOffice);\r\n            return SUCCESS_ONLY;\r\n        }\r\n    }\r\n\r\n    public ApiResponse updateOffice(Office editingOffice, String officeId){\r\n        Optional<Office> byId = officeRepository.findById(officeId);\r\n        if (byId.isEmpty()) return NOT_FOUND;\r\n        else {\r\n            Office officeFound = byId.get(); //found office from database\r\n            if (editingOffice.isParkingAvailable()!=officeFound.isParkingAvailable()){\r\n                officeFound.setParkingAvailable(editingOffice.isParkingAvailable());\r\n            }\r\n\r\n            if (!editingOffice.getName().equals(officeFound.getName())){\r\n                officeFound.setName(editingOffice.getName());\r\n            }\r\n\r\n            officeRepository.save(officeFound);\r\n            return SUCCESS_ONLY;\r\n        }\r\n    }\r\n\r\n    public ApiResponse deleteOffice(String officeId){\r\n        Optional<Office> byId = officeRepository.findById(officeId);\r\n        if (byId.isEmpty()) return NOT_FOUND;\r\n        else {\r\n            officeRepository.deleteById(officeId);\r\n            return SUCCESS_ONLY;\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/OfficeService.java b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/OfficeService.java
--- a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/OfficeService.java	
+++ b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/OfficeService.java	
@@ -2,16 +2,12 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
-import uz.exadel.hotdeskbooking.dto.OfficeDto;
-import uz.exadel.hotdeskbooking.model.Address;
-import uz.exadel.hotdeskbooking.model.Office;
-import uz.exadel.hotdeskbooking.repository.AddressRepository;
+import uz.exadel.hotdeskbooking.domain.OfficeDomain;
 import uz.exadel.hotdeskbooking.repository.MapRepository;
 import uz.exadel.hotdeskbooking.repository.OfficeRepository;
 import uz.exadel.hotdeskbooking.response.ApiResponse;
 import uz.exadel.hotdeskbooking.response.BaseResponse;
 
-import java.util.List;
 import java.util.Optional;
 
 @Service
@@ -19,8 +15,6 @@
 
     @Autowired
     OfficeRepository officeRepository;
-    @Autowired
-    AddressRepository addressRepository;
     @Autowired
     MapRepository mapRepository;
 
@@ -30,27 +24,12 @@
         return SUCCESS;
     }
 
-    public ApiResponse addOffice(Office office, String addressId){
-
-        boolean addressExists = officeRepository.existsOfficeByAddress_Id(addressId);
-        if (addressExists) return ALREADY_EXISTS;
-
-        Optional<Address> byId = addressRepository.findById(addressId);
-
-        boolean doesExist = officeRepository.existsByName(office.getName());
-        if (doesExist) return ALREADY_EXISTS;
+    public ApiResponse addOffice(OfficeDomain office, String addressId){
 
-        if (byId.isEmpty()) return NOT_FOUND;
-        else {
-            Address address = byId.get();
-            Office newOffice = new Office(office.getName(), office.isParkingAvailable(), address);
-            officeRepository.save(newOffice);
-            return SUCCESS_ONLY;
-        }
     }
 
-    public ApiResponse updateOffice(Office editingOffice, String officeId){
-        Optional<Office> byId = officeRepository.findById(officeId);
+    public ApiResponse updateOffice(OfficeDomain editingOffice, String officeId){
+        Optional<OfficeDomain> byId = officeRepository.findById(officeId);
         if (byId.isEmpty()) return NOT_FOUND;
         else {
             Office officeFound = byId.get(); //found office from database
@@ -68,7 +47,7 @@
     }
 
     public ApiResponse deleteOffice(String officeId){
-        Optional<Office> byId = officeRepository.findById(officeId);
+        Optional<OfficeDomain> byId = officeRepository.findById(officeId);
         if (byId.isEmpty()) return NOT_FOUND;
         else {
             officeRepository.deleteById(officeId);
Index: hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/domain/OfficeDomain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uz.exadel.hotdeskbooking.domain;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport javax.persistence.*;\r\n\r\n@Getter\r\n@Setter\r\n@Entity\r\n@Table(name = \"office\")\r\npublic class OfficeDomain extends BaseDomain {\r\n    private String name;\r\n\r\n    private String country;\r\n\r\n    private String city;\r\n\r\n    private String address;\r\n\r\n    private Boolean isFreeParkingAvailable;\r\n\r\n    @Override\r\n    public String getEntityKey() {\r\n        return \"office\";\r\n    }\r\n}\r\n
===================================================================
diff --git a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/domain/OfficeDomain.java b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/domain/OfficeDomain.java
--- a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/domain/OfficeDomain.java	
+++ b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/domain/OfficeDomain.java	
@@ -4,21 +4,30 @@
 import lombok.Setter;
 
 import javax.persistence.*;
+import javax.validation.constraints.NotNull;
 
 @Getter
 @Setter
 @Entity
 @Table(name = "office")
 public class OfficeDomain extends BaseDomain {
+    @NotNull
+    @Column(nullable = false)
     private String name;
 
+    @NotNull
+    @Column(nullable = false)
     private String country;
 
+    @NotNull
+    @Column(nullable = false)
     private String city;
 
+    @NotNull
+    @Column(nullable = false)
     private String address;
 
-    private Boolean isFreeParkingAvailable;
+    private boolean isFreeParkingAvailable = false;
 
     @Override
     public String getEntityKey() {
Index: hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/AddressController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uz.exadel.hotdeskbooking.controller;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport uz.exadel.hotdeskbooking.model.Address;\r\nimport uz.exadel.hotdeskbooking.response.ApiResponse;\r\nimport uz.exadel.hotdeskbooking.service.AddressService;\r\n\r\nimport java.util.List;\r\n\r\n@RequestMapping(\"/address\")\r\n@RestController\r\n@RequiredArgsConstructor\r\npublic class AddressController {\r\n    @Autowired\r\n    private final AddressService addressService;\r\n\r\n\r\n    @GetMapping\r\n    public ApiResponse getAddressList(){\r\n        return addressService.getAddressList();\r\n    }\r\n\r\n    @PostMapping\r\n    public ApiResponse addAddress(@RequestBody Address address){\r\n        return addressService.addAddress(address);\r\n    }\r\n\r\n    @DeleteMapping(\"/{addressId}\")\r\n    public ApiResponse deleteAddress(@PathVariable String addressId){\r\n        return addressService.deleteAddress(addressId);\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/AddressController.java b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/AddressController.java
--- a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/AddressController.java	
+++ b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/controller/AddressController.java	
@@ -1,36 +1,31 @@
 package uz.exadel.hotdeskbooking.controller;
 
-import lombok.AllArgsConstructor;
 import lombok.RequiredArgsConstructor;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.*;
-import uz.exadel.hotdeskbooking.model.Address;
-import uz.exadel.hotdeskbooking.response.ApiResponse;
+import org.springframework.beans.factory.annotation.Required;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
 import uz.exadel.hotdeskbooking.service.AddressService;
 
 import java.util.List;
 
-@RequestMapping("/address")
 @RestController
 @RequiredArgsConstructor
+@RequestMapping("/api/address")
 public class AddressController {
-    @Autowired
+
     private final AddressService addressService;
 
 
-    @GetMapping
-    public ApiResponse getAddressList(){
-        return addressService.getAddressList();
-    }
 
-    @PostMapping
-    public ApiResponse addAddress(@RequestBody Address address){
-        return addressService.addAddress(address);
+    @GetMapping("/countryList")
+    public List<String> getCityList(){
+        return addressService.getCityList();
     }
 
-    @DeleteMapping("/{addressId}")
-    public ApiResponse deleteAddress(@PathVariable String addressId){
-        return addressService.deleteAddress(addressId);
+    @GetMapping("/cityList")
+    public List<String> getCountryList(){
+        return addressService.getCountryList();
     }
 
 }
Index: hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/AddressService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uz.exadel.hotdeskbooking.service;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport uz.exadel.hotdeskbooking.model.Address;\r\nimport uz.exadel.hotdeskbooking.repository.AddressRepository;\r\nimport uz.exadel.hotdeskbooking.response.ApiResponse;\r\nimport uz.exadel.hotdeskbooking.response.BaseResponse;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class AddressService extends BaseResponse {\r\n    @Autowired\r\n    AddressRepository addressRepository;\r\n\r\n\r\n    public ApiResponse getAddressList(){\r\n        SUCCESS.setData(addressRepository.findAll());\r\n        return SUCCESS;\r\n    }\r\n\r\n    public ApiResponse addAddress(Address address){\r\n        boolean alreadyExists = addressRepository.existsByAddressAndCityAndCountry(address.getAddress(), address.getCity(), address.getCountry());\r\n\r\n        if (alreadyExists) return ALREADY_EXISTS;\r\n        else {\r\n            addressRepository.save(address);\r\n            return SUCCESS_ONLY;\r\n        }\r\n    }\r\n\r\n    public ApiResponse deleteAddress(String addressId){\r\n        boolean exists = addressRepository.existsById(addressId);\r\n        if (!exists) return NOT_FOUND;\r\n        else {\r\n            addressRepository.deleteById(addressId);\r\n            return SUCCESS_ONLY;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/AddressService.java b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/AddressService.java
--- a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/AddressService.java	
+++ b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/service/AddressService.java	
@@ -1,46 +1,38 @@
 package uz.exadel.hotdeskbooking.service;
 
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import org.springframework.beans.factory.annotation.Autowired;
+import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
-import uz.exadel.hotdeskbooking.model.Address;
+import uz.exadel.hotdeskbooking.domain.OfficeDomain;
 import uz.exadel.hotdeskbooking.repository.AddressRepository;
-import uz.exadel.hotdeskbooking.response.ApiResponse;
-import uz.exadel.hotdeskbooking.response.BaseResponse;
 
+import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 @Service
-public class AddressService extends BaseResponse {
-    @Autowired
-    AddressRepository addressRepository;
+@RequiredArgsConstructor
+public class AddressService {
 
+    private final AddressRepository addressRepository;
 
-    public ApiResponse getAddressList(){
-        SUCCESS.setData(addressRepository.findAll());
-        return SUCCESS;
-    }
 
-    public ApiResponse addAddress(Address address){
-        boolean alreadyExists = addressRepository.existsByAddressAndCityAndCountry(address.getAddress(), address.getCity(), address.getCountry());
+    public List<String > getCountryList(){
+        List<OfficeDomain> officeList = addressRepository.findAll();
+        List<String > countryList = new ArrayList<>();
 
-        if (alreadyExists) return ALREADY_EXISTS;
-        else {
-            addressRepository.save(address);
-            return SUCCESS_ONLY;
-        }
+        officeList.forEach(officeDomain -> {
+            if (!countryList.contains(officeDomain.getCountry())){
+                countryList.add(officeDomain.getCountry());
+            }
+        });
+
+        return countryList;
     }
 
-    public ApiResponse deleteAddress(String addressId){
-        boolean exists = addressRepository.existsById(addressId);
-        if (!exists) return NOT_FOUND;
-        else {
-            addressRepository.deleteById(addressId);
-            return SUCCESS_ONLY;
-        }
-    }
 
+    public List<String > getCityList(){
+        
+    };
 
 }
Index: hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/dto/OfficeDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uz.exadel.hotdeskbooking.dto;\r\n\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class OfficeDto {\r\n    private String name;\r\n    private boolean isParkingAvailable;\r\n}\r\n
===================================================================
diff --git a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/dto/OfficeDto.java b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/dto/OfficeDto.java
--- a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/dto/OfficeDto.java	
+++ b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/dto/OfficeDto.java	
@@ -1,14 +1,16 @@
 package uz.exadel.hotdeskbooking.dto;
 
 
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.*;
 
-@Data
+@Getter
+@Setter
 @AllArgsConstructor
 @NoArgsConstructor
 public class OfficeDto {
+    @JsonProperty("name")
     private String name;
+    @JsonProperty("is_parking_available")
     private boolean isParkingAvailable;
 }
Index: hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/AddressRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uz.exadel.hotdeskbooking.repository;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport uz.exadel.hotdeskbooking.model.Address;\r\n\r\n\r\npublic interface AddressRepository extends JpaRepository<Address, String>{\r\n\r\n    boolean existsByAddressAndCityAndCountry(String address, String city, String country);\r\n}\r\n
===================================================================
diff --git a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/AddressRepository.java b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/AddressRepository.java
--- a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/AddressRepository.java	
+++ b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/AddressRepository.java	
@@ -1,10 +1,12 @@
 package uz.exadel.hotdeskbooking.repository;
 
 import org.springframework.data.jpa.repository.JpaRepository;
-import uz.exadel.hotdeskbooking.model.Address;
+import uz.exadel.hotdeskbooking.domain.OfficeDomain;
+
+import java.util.List;
 
+public interface AddressRepository extends JpaRepository<OfficeDomain, String> {
 
-public interface AddressRepository extends JpaRepository<Address, String>{
 
-    boolean existsByAddressAndCityAndCountry(String address, String city, String country);
+
 }
Index: hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/OfficeRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uz.exadel.hotdeskbooking.repository;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.stereotype.Repository;\r\nimport uz.exadel.hotdeskbooking.model.Office;\r\n\r\nimport java.util.Optional;\r\n\r\n@Repository\r\npublic interface OfficeRepository extends JpaRepository<Office, String> {\r\n\r\n    boolean existsByName(String name);\r\n\r\n    boolean existsOfficeByAddress_Id(String address_id);\r\n}\r\n
===================================================================
diff --git a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/OfficeRepository.java b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/OfficeRepository.java
--- a/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/OfficeRepository.java	
+++ b/hotdeskBooking/src/main/java/uz/exadel/hotdeskbooking/repository/OfficeRepository.java	
@@ -3,14 +3,14 @@
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.stereotype.Repository;
+import uz.exadel.hotdeskbooking.domain.OfficeDomain;
 import uz.exadel.hotdeskbooking.model.Office;
 
+import java.util.List;
 import java.util.Optional;
 
 @Repository
-public interface OfficeRepository extends JpaRepository<Office, String> {
+public interface OfficeRepository extends JpaRepository<OfficeDomain, String> {
 
-    boolean existsByName(String name);
 
-    boolean existsOfficeByAddress_Id(String address_id);
 }
